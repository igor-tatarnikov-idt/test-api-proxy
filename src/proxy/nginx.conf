worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;";

    log_format detailed_proxy '[$time_local] $remote_addr "$request" status=$status '
                              'x-target-host="$http_x_target_host" x-tokenization-mode="$http_x_tokenization_mode"';

    access_log /var/log/nginx/access.log detailed_proxy;
    error_log /var/log/nginx/error.log debug;
    lua_need_request_body on;
    keepalive_timeout 65;

    server {
        listen 80;
        listen 8080;
        listen 8081;
        resolver 10.89.6.1;

        location / {
            access_log /var/log/nginx/access.log detailed_proxy;

            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                local request_processing = require("request_processing")
                local tokenizer_integration = require("tokenizer_integration")

                -- Capture the headers
                local target_host = ngx.var.http_x_target_host
                local tokenization_mode = ngx.var.http_x_tokenization_mode
                local request_uri = ngx.var.request_uri

                ngx.log(ngx.INFO, "target-host: ", target_host)
                ngx.log(ngx.INFO, "tokenization-mode: ", tokenization_mode)
                ngx.log(ngx.INFO, "request-uri: ", request_uri)

                if not target_host or target_host == "" then
                    ngx.status = 400
                    ngx.say("Missing X-Target-Host header")
                    return
                end

                ngx.req.read_body()
                local body_data = ngx.req.get_body_data()

                if body_data then
                    ngx.log(ngx.DEBUG, "Original request body: ", body_data)

                    if tokenization_mode == "tokenize" and body_data then
                        body_data = tokenizer_integration.tokenize_request(body_data)
                        ngx.req.set_body_data(body_data)
                        ngx.log(ngx.DEBUG, "Modified request body: ", body_data)

                    elseif tokenization_mode == "detokenize" and body_data then
                        body_data = tokenizer_integration.detokenize_request(body_data)
                        ngx.req.set_body_data(body_data)
                        ngx.log(ngx.DEBUG, "Modified request body: ", body_data)
                    end
                end

                local httpc = http.new()
                local res, err = httpc:request_uri("http://" .. target_host .. request_uri, {
                    method = ngx.req.get_method(),
                    body = body_data,
                    headers = {
                        ["Content-Type"] = ngx.req.get_headers()["Content-Type"],
                        ["X-Real-IP"] = ngx.var.remote_addr,
                        ["X-Forwarded-For"] = ngx.var.http_x_forwarded_for,
                        ["X-Forwarded-Proto"] = ngx.var.scheme,
                        ["Host"] = ngx.var.host
                    }
                })

                if not res then
                    ngx.status = 500
                    ngx.say("Failed to proxy request: ", err)
                    return
                end

                ngx.status = res.status
                ngx.header.content_type = res.headers["Content-Type"]
                ngx.say(res.body);
            }
        }
    }
}